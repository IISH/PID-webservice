<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

    <http access-denied-page="/admin/login.jsp" access-decision-manager-ref="accessDecisionManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/secure/**" access="ROLE_USER"/>
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/oauth/authorize" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/oauth/**" access="ROLE_USER"/>
        <intercept-url pattern="/admin/keys" access="ROLE_USER"/>
        <intercept-url pattern="/admin/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/" access="IS_AUTHENTICATED_ANONYMOUSLY"/>

        <form-login authentication-failure-url="/admin/login" default-target-url="/admin/keys" login-page="/admin/login"
                    login-processing-url="/admin/login.do"/>
        <logout logout-success-url="/" logout-url="/admin/logout.do"/>
        <anonymous/>
        <custom-filter ref="resourceServerFilter" before="EXCEPTION_TRANSLATION_FILTER"/>
    </http>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
          xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="tokenStore" class="org.socialhistoryservices.security.MongoTokenStore">
        <property name="mongo" ref="mongo"/>
        <property name="database" value="handlesystem"/>
    </bean>
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.RandomValueTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="accessTokenValiditySeconds" value="31536000"/>
        <property name="refreshTokenValiditySeconds" value="31536000"/>
        <property name="reuseRefreshToken" value="true"/>
        <property name="supportRefreshToken" value="true"/>
    </bean>

    <oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices">
        <oauth:authorization-code/>
        <oauth:implicit/>
        <oauth:refresh-token/>
        <oauth:client-credentials/>
        <oauth:password/>
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter" token-services-ref="tokenServices"/>

    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="pid-webservice-client" authorized-grant-types="authorization_code"
                      authorities="ROLE_CLIENT" scope="read,write"/>
    </oauth:client-details-service>

    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler"/>
    </sec:global-method-security>
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>

    <oauth:expression-handler id="oauthExpressionHandler"/>

    <bean id="accessConfirmationController"
          class="org.socialhistoryservices.pid.controllers.AccessConfirmationController">
        <property name="clientDetailsService" ref="clientDetails"/>
    </bean>

    <bean class="org.socialhistoryservices.pid.controllers.KeysController">
        <property name="mongoTokenStore" ref="tokenStore"/>
        <property name="tokenServices" ref="tokenServices"/>
        <property name="clientDetails" ref="clientDetails"/>
    </bean>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/templates/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/admin/login" view-name="login"/>
    <mvc:view-controller path="/admin/login.form" view-name="login.form"/>

    <!-- this authenticationManager and mongoUserDetailService can be replaced by any other userdetails service -->
    <bean id="mongoUserDetailService" class="org.socialhistoryservices.security.MongoUserDetailService">
        <property name="mongo" ref="mongo"/>
        <property name="database" value="#{pidProperties['mongo.database']}"/>
    </bean>

    <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="mongoUserDetailService">
            <password-encoder hash="sha-256"/>
        </authentication-provider>

        <!--<sec:ldap-authentication-provider
                user-search-filter="#{pidProperties['ldap-authentication-provider.user-search-filter']}"
                user-search-base="#{pidProperties['ldap-authentication-provider.user-search-base']}"
                group-search-filter="#{pidProperties['ldap-authentication-provider.group-search-filter']}"
                group-search-base="#{pidProperties['ldap-authentication-provider.group-search-base']}"
                group-role-attribute="#{pidProperties['ldap-authentication-provider.group-role-attribute']}"
                role-prefix="#{pidProperties['ldap-authentication-provider.role-prefix']}">
        </sec:ldap-authentication-provider>-->
    </authentication-manager>
  <!--  <sec:ldap-server url="#{pidProperties['ldap-server.url']}" manager-dn="#{pidProperties['ldap-server.manager-dn']}"
                     manager-password="#{pidProperties['ldap-server.manager-password']}"/>-->

</beans>